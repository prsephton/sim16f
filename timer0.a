;__________________________________________________________________________________________
;  This program exercises the TMR0 interrupt
;  ===========================================
;  We start by initialising PORTA and PORTB as outputs, and set them to 0.
;  We select Fosc as the clock by setting T0CS low, then disable
;  the prescaler by setting PSA high.
;  Interrupts are enabled by setting T0IE and GIE flags.
;
;  In this mode, we expect TMR0 to increment with every clock cycle.
;
;  After 0x100 - 0xE1 (31) clock cycles, we are interrupted as T0IF goes high.  The
;  IRQ handler sets T0IF low, reverses direction, reloads TMR0 with 0xE1, and
;  exits after restoring state.
;
;  The effect is seen by the PORTB value counting up, then down, then up again until
;  the universe ends, or the program does, whichever comes first.
;
;  Why choose 31 cycles for the TMR0 value?
;     - its long enough to see some counting on PORTB
;     - 31 cycles causes the interrupt to happen at different points in the 
;       three instruction long loop. So we test some interesting behaviour.


w-save:		EQU 0x7f              ; where we save the W register during interrupts
sts-save: 	EQU 0x22              ; where we save the STATUS register during interrupts
direction:	EQU 0x26              ; increments or decrements PORTA depending on direction
tmr0-initval:	EQU 0xE1              ; value to use when initialising TMR0

		CONFIG	0x3f71        ; set configuration
;______________________________________________________________________
;  Program starts here
program-start:	ORG 0                 ; Code starts at PC=0
		call	initialise    ; Call the initialise procedure
		goto    start         ; Start adding 'direction' to PORTB

;______________________________________________________________________
;  After TMR0 overflows, we come here, with GIE disabled
isr-save:	ORG 4                     ; this is the start of the interrupt vector.
		movwf	w-save            ; save W register
		swapf	STATUS,w          ; swap high & low nibbles of status, store in W
		clrf	STATUS            ; Clear status register
		movwf	sts-save          ; save W to sts-save
irq-handler:	
		btfss	INTCON,T0IF       ; Was TMR0 the interrupt source?
		goto	exit-irq          ;  if not, exit the IRQ
		bcf	INTCON,T0IF	  ; Clear TMR0 interrupt flag
		movf	direction,w	  ; move direction into W
		sublw	0x00              ; W = 0 - W
		movwf	direction         ; save W to  direction
		movlw	tmr0-initval      ; W = tmr0-initval
		movwf	TMR0              ; Store W to TMR0
exit-irq:	swapf	sts-save,w        ; Swap nibbles in sts-save, store in W
		movwf	STATUS            ; Restore status from W
		swapf	w-save,f          ; Swap nibbles in w-save, store in w-save
		swapf	w-save,w          ; Swap nibbles in w-save, store in W
		retfie

;______________________________________________________________________
;  This is the initialisation routine
initialise:	clrf	PORTA             ; Clear PORTA
		clrf	PORTB             ; and PORTB
		bsf	STATUS,RP0        ; Select Bank 1
		clrf	TRISA             ; Clear TRISA
		clrf	TRISB             ; and TRISB, setting ports for output
		clrf	OPTION            ; Clear OPTION (and thus T0CS is low)
		bsf	OPTION,PSA        ; Set PSA high
		bcf	STATUS,RP0        ; Select bank 0
		movlw	0x01              ; W = 1
		movwf	direction         ; Store W to direction
		movlw	tmr0-initval      ; W = tmr1-initval (0xE1)
		movwf	TMR0              ; Store W to TMR0
		bsf	INTCON,T0IE       ; Enable TMR0 Interrupts
		bcf	INTCON,T0IF       ; Clear the TMR0 interrupt flag
		bsf	INTCON,GIE        ; Enable interrupts globally
		return

;______________________________________________________________________
;  Add direction to portB and loop
start:		
		movf	direction,w       ; W = direction
		addwf	PORTB,f           ; PORTB = PORTB + direction
		goto	start             ; and do that again


